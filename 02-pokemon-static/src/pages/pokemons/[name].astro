---
import { Icon } from 'astro-icon/components';

import type { GetStaticPaths } from 'astro';
import type { PokemonListResponse } from '@interfaces/pokemon-list-response';

import MainLayout from '@layouts/MainLayout.astro';
import PokemonCard from '@components/pokemons/PokemonCard.astro';
import Title from '@components/shared/Title.astro';

export const getStaticPaths = (async () => {
	const resp = await fetch('https://pokeapi.co/api/v2/pokemon?limit=151');
	const { results } = (await resp.json()) as PokemonListResponse;

	return results.map(({ name, url }) => ({
		params: { name },
		props: { name, url },
	}));
}) satisfies GetStaticPaths;

const { name } = Astro.params;
const { url } = Astro.props;

const id = url.split('/').at(-2);
const audioSrc = `https://raw.githubusercontent.com/PokeAPI/cries/main/cries/pokemon/latest/${id}.ogg`;
const imageSrc = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${id}.png`;
---

<MainLayout title={name} description=`Informacion sobre el pokemon ${name}` image={imageSrc}>
	<section class="mt-10 mx-10 flex flex-col justify-center items-center">
		<div>
			<!-- <a class="hover:underline text-blue-500" href="/">Regresar</a> -->
			<button onclick="history.back()" class="text-blue-500">Regresar</button>
			<div class="flex flex-row items-center">
				<Title>{name}</Title>
				<button id="btn-favorite" class="ml-5" data-name={name} data-id={id}>
					<Icon data-outline name="heart-outline" size={50} />
					<Icon data-fill class="hidden" name="heart-fill" size={50} />
				</button>
			</div>
		</div>

		<PokemonCard name={name} url={url} isBig />
		<audio controls class="mt-5">
			<source src={audioSrc} type="audio/ogg" />
			Your browser does not support the audio element.
		</audio>
	</section>
</MainLayout>

<script>
	interface FavoritePokemon {
		name: string;
		id: number;
	}

	document.addEventListener('astro:page-load', () => handlePageLoad());

	const handlePageLoad = () => {
		let favoritesPokemon: FavoritePokemon[] = JSON.parse(
			localStorage.getItem('favoritesPokemon') ?? '[]',
		);

		const btnFavorite = document.querySelector('#btn-favorite') as HTMLButtonElement;

		if (!btnFavorite) return;

		const name = btnFavorite.dataset.name ?? '';
		const id = btnFavorite.dataset.id ?? '';

		const heartOutline = btnFavorite.querySelector('[data-outline]') as HTMLElement;
		const heartFill = btnFavorite.querySelector('[data-fill]') as HTMLElement;

		const isFavorite = favoritesPokemon.some((fav) => fav.name === name);
		if (isFavorite) {
			heartOutline.classList.add('hidden');
			heartFill.classList.remove('hidden');
		}

		const toggleFavorite = () => {
			if (isFavorite) {
				favoritesPokemon = favoritesPokemon.filter((fav) => fav.name !== name);
			} else {
				if (name && id) favoritesPokemon.push({ name, id: +id });
			}

			localStorage.setItem('favoritesPokemon', JSON.stringify(favoritesPokemon));
		};

		btnFavorite.addEventListener('click', () => {
			heartOutline.classList.toggle('hidden');
			heartFill.classList.toggle('hidden');
			toggleFavorite();
		});
	};
</script>

<style>
	#btn-favorite:hover {
		animation: var(--animate-pulse);
		cursor: pointer;
	}
</style>
